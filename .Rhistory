library(haven)
dataset <- read_sas(NULL, NULL)
View(dataset)
library(haven)
dataset <- read_sas(NULL, NULL)
View(dataset)
R.version
q()
.libPaths()
q()
install.packages('ggplot2')
library(ggplot2)
getwd()
setwd("C:Rdirectory/buisinessstatistics")
setwd("C:Rdirectory/businessstatistics")
pmf=c(0, 1/2, 1/2, 0)
plot(c(-100,-50,100,150), pmf, type='h', lwd=3, main='X의 확률질량함수', xlab='', ylab='')
abline(h=0, lwd=3)
dbinom(10, 1000, 0.007)
ppois(10,7)
dpois(10,7)
1 - ppois(9,12)
qnorm(0.05)
1-pnorm(2)
qnorm(0.95)
(0.345 – 0.45) / sqrt(0.45*0.55 / 1100)
0.345 – 0.45 / sqrt(0.45*0.55 / 1100)
x = 0.345 – 0.45 / sqrt(0.45*0.55 / 1100)
x0.345 – 0.45 / sqrt()0.45*0.55) / 1100)
x0.345 – 0.45 / sqrt((0.45*0.55) / 1100)
0.345-0.45 / sqrt((0.45*0.55) / 1100)
qnorm(0.05)
qnorm(0.025)
1.96 * 1.96 / 4 * 0.5 * 0.5
1.96 * 1.96 / 4 * 0.005 * 0.005
0.508 – 1.96*sqrt(0.508*0.492/1100)
0.508–1.96*sqrt(0.508*0.492/1100)
0.508-1.96*sqrt(0.508*0.492/1100)
0.508+1.96*sqrt(0.508*0.492/1100)
0.508 - 0.4784557
0.508 - 0.5375443
0.5375443 - 0.508
0.508+1.96*sqrt(0.508*0.492/1001)
0.508-1.96*sqrt(0.508*0.492/1001)
0.508-0.4770291
qnorm(0.05, 700000, 40000/sqrt(100))
qnorm(0.95, 700000, 40000/sqrt(100))
pnorm(706579.4, 692000, 4000) – pnorm(693420.6, 692000, 4000)
pnorm(706579.4, 692000, 4000)-pnorm(693420.6, 692000, 4000)
qnorm(0.05, 700000, 40000/sqrt(225))
qnorm(0.95, 700000, 40000/sqrt(225))
pnorm(704386.3, 692000, 4000)-pnorm(695613.7, 692000, 4000)
qnorm(0.025, 700000, 40000/sqrt(225))
qnorm(0.975, 700000, 40000/sqrt(225))
pnorm(704386.3, 692000, 40000/sqrt(225))-pnorm(695613.7, 692000, 40000/sqrt(225))
qnorm(0.025, 700000, 40000/sqrt(225))
qnorm(0.975, 700000, 40000/sqrt(225))
pnorm(705226.6, 692000, 40000/sqrt(225))-pnorm(694773.4, 692000, 40000/sqrt(225))
15*15
40000/15
for (m in seq(680000,720000,4000)) {
x1 = qnorm(0.025, m, 4000);
x2 = qnorm(0.975, m, 4000);
b=pnorm(x2, m, 4000)-pnorm(x1, m, 4000)
cat(mu, b, 1-b, "\n")
}
for (m in seq(680000,720000,4000)) {
x1 = qnorm(0.025, m, 4000);
x2 = qnorm(0.975, m, 4000);
b=pnorm(x2, m, 4000)-pnorm(x1, m, 4000)
cat(m, b, 1-b, "\n")
}
qnorm(0.025, 680000, 4000);
seq(680000,720000,4000)
for (m in seq(680000,720000,4000)) {
x1 = qnorm(0.025, m, 4000);
x2 = qnorm(0.975, m, 4000);
b = pnorm(x2, m, 4000)-pnorm(x1, m, 4000)
cat(m, b, 1-b, "\n")
}
m=680000
x1 = qnorm(0.025, m, 4000);
x2 = qnorm(0.975, m, 4000);
b = pnorm(x2, m, 4000)-pnorm(x1, m, 4000)
x1 x2 b
x1
x2
b
b = pnorm(x2, m, 4000)-pnorm(x1, m, 4000)
x1
x2
b
pnorm(x2, m, 4000)
pnorm(x1, m, 4000)
x1
x2
for (m in seq(680000,720000,4000)) {
x1 = qnorm(0.025, m, 4000);
x2 = qnorm(0.975, m, 4000);
b = pnorm(707839.9, m, 4000)-pnorm(692160.1, m, 4000)
cat(m, b, 1-b, "\n")
}
qchisq(0.99, 4)
Ei=rep(0,7); i=1
pr=pnorm(40, 100, 20); Ei[i]=500*pr
cat("  ~40", pr, Ei[i], "\n"); i=i+1)
cat(x,"~", x+20, pr, Ei[i], "\n"); i=i+1)
for (x in seq(40,120,20)) {
pr=pnorm(x+20, 100, 20)-pnorm(x, 100, 20)
Ei[i]=500*pr
cat(x,"~", x+20, pr, Ei[i], "\n"); i=i+1)
Ei=rep(0,7); i=1
pr=pnorm(40, 100, 20); Ei[i]=500*pr
cat("  ~40", pr, Ei[i], "\n"); i=i+1)
Ei=rep(0,7); i=1
pr=pnorm(40, 100, 20); Ei[i]=500*pr
cat("  ~40", pr, Ei[i], "\n"); i=i+1
for (x in seq(40,120,20)) {
pr=pnorm(x+20, 100, 20)-pnorm(x, 100, 20)
Ei[i]=500*pr
cat(x,"~", x+20, pr, Ei[i], "\n"); i=i+1
}
Ei
Ei=rep(0,7); i=1
pr=pnorm(40, 100, 20); Ei[i]=500*pr
cat("  ~40", pr, Ei[i], "\n"); i=i+1
for (x in seq(40,120,20)) {
pr=pnorm(x+20, 100, 20)-pnorm(x, 100, 20)
Ei[i]=500*pr
cat(x,"~", x+20, pr, Ei[i], "\n"); i=i+1
}
Ei
cat(x,"~", x+20, Ei[i], "\n"); i=i+1
for (x in seq(40,120,20)) {
pr=pnorm(x+20, 100, 20)-pnorm(x, 100, 20)
Ei[i]=500*pr
cat(x,"~", x+20, Ei[i], "\n"); i=i+1
}
Ei=rep(0,7); i=1
pr=pnorm(40, 100, 20); Ei[i]=500*pr
cat("  ~40", pr, Ei[i], "\n"); i=i+1
Ei=rep(0,7); i=1
pr=pnorm(40, 100, 20); Ei[i]=500*pr
cat("  ~40", pr, Ei[i], "\n"); i=i+1
for (x in seq(40,120,20)) {
pr=pnorm(x+20, 100, 20)-pnorm(x, 100, 20)
Ei[i]=500*pr
cat(x,"~", x+20, Ei[i], "\n"); i=i+1
}
cat("  ~40", Ei[i], "\n"); i=i+1
Ei=rep(0,7); i=1
pr=pnorm(40, 100, 20); Ei[i]=500*pr
cat("  ~40", Ei[i], "\n"); i=i+1
for (x in seq(40,120,20)) {
pr=pnorm(x+20, 100, 20)-pnorm(x, 100, 20)
Ei[i]=500*pr
cat(x,"~", x+20, Ei[i], "\n"); i=i+1
}
0.674949 + 10.70012
Oi=c(25,50,225,125,75,0)
Chi=(Oi-Ei)^2/Ei
Chi2=sum(Chi); Chi2
1-pchisq(Chi2,5)
setwd('C:/Rdirectory/data_mining/data_mining_covid');
#=================================================================================================================
covid_train = read.csv("covid_train.csv", header=T);
str(covid_train);
head(covid_train);
#=================================================================================================================
covid_test = read.csv("covid_test.csv", header=T);
str(covid_test);
head(covid_test);
#=================================================================================================================
covid_dead_train = read.csv("covid_dead_train.csv", header=T);
str(covid_dead_train);
head(covid_dead_train);
#=================================================================================================================
covid_dead_test = read.csv("covid_dead_test.csv", header=T);
str(covid_dead_test);
head(covid_dead_test);
regressionFit = lm(is_dead ~ ., data=covid_train);
summary(regressionFit);
prediction = predict(regressionFit, covid_test);
summary(prediction);
prediction = round(prediction);
comparison=cbind(covid_test,prediction);
comparison=as.data.frame(comparison);
print(paste("test 건수 : ",nrow(covid_test)));
predictCorrect = comparison[comparison$is_dead == comparison$prediction,];
print(paste("사망여부 예측성공 건수 : ", nrow(predictCorrect)));
print(paste("사망여부 예측 정확도 : " ,nrow(predictCorrect)/nrow(covid_test))); # 61.1%
# true-positive, true-negative, false-positive, false-negative rate 계산
tp = round(nrow(comparison[comparison$is_dead == 1 & comparison$prediction == 1, ])/nrow(covid_test),2);
tn = round(nrow(comparison[comparison$is_dead == 2 & comparison$prediction == 2, ])/nrow(covid_test),2);
fp = round(nrow(comparison[comparison$is_dead == 2 & comparison$prediction == 1, ])/nrow(covid_test),2);
fn = round(nrow(comparison[comparison$is_dead == 1 & comparison$prediction == 2, ])/nrow(covid_test),2);
# true-positive, true-negative, false-positive, false-negative rate 계산
confusion_matrix = matrix(c(tp, fn, fp, tn), nrow = 2, byrow = TRUE, dimnames = list(c("Actual Positive", "Actual Negative"), c("Predicted Positive", "Predicted Negative")))
confusion_matrix;
regressionFit_dead = lm(day_cnt ~ ., data=covid_dead_train);
regressionFit_dead = lm(day_cnt ~ ., data=covid_dead_train);
summary(regressionFit_dead);
summary(regressionFit_dead);
prediction_dead = predict(regressionFit_dead, covid_dead_test);
summary(prediction_dead);
prediction_dead = round(prediction_dead);
comparison_dead=cbind(covid_dead_test,prediction_dead);
comparison_dead=as.data.frame(comparison_dead);
print(paste("test 건수 : ", nrow(covid_dead_test)));
# 투병일수 예측성공 기준 설정
deadPredictCorrectCreteria = 10;
deadPredictCorrect = comparison_dead[abs(comparison_dead$day_cnt-comparison_dead$prediction_dead)<=deadPredictCorrectCreteria, 0];
print(paste("투병일수 예측성공 건수(",deadPredictCorrectCreteria,"일) : " , nrow(deadPredictCorrect)));
print(paste("투병일수 예측 정확도(",deadPredictCorrectCreteria,"일) : ", nrow(deadPredictCorrect) / nrow(covid_dead_test)));
# 5일 : 51.6%, 7일 : 72.6%, 10일 : 92.1%
setwd('C:/Rdirectory/data_mining/data_mining_covid');
#=================================================================================================================
covid_train = read.csv("covid_train.csv", header=T);
covid_train$is_dead = ifelse(covid_train$is_dead == 2,0,1);
str(covid_train);
head(covid_train);
#=================================================================================================================
covid_test = read.csv("covid_test.csv", header=T);
covid_test$is_dead = ifelse(covid_test$is_dead == 2,0,1);
str(covid_test);
head(covid_test);
#=================================================================================================================
covid_dead_train = read.csv("covid_dead_train.csv", header=T);
str(covid_dead_train);
head(covid_dead_train);
#=================================================================================================================
covid_dead_test = read.csv("covid_dead_test.csv", header=T);
str(covid_dead_test);
head(covid_dead_test);
#=================================================================================================================
logisticFit = glm(is_dead~., data =covid_train, family = binomial);
summary(logisticFit);
summary(logisticFit);
prediction = predict(logisticFit, newdata=covid_test, type = "response");
print(prediction);
prediction=round(prediction);
comparison=cbind(covid_test,prediction);
comparison=as.data.frame(comparison);
comparison
print(paste("test 건수 : ",nrow(covid_test)));
predictCorrect = comparison[comparison$is_dead == comparison$prediction,];
print(paste("사망여부 예측성공 건수 : ", nrow(predictCorrect)));
print(paste("사망여부 예측 정확도 : " ,nrow(predictCorrect)/nrow(covid_test))); # 60.9%
# true-positive, true-negative, false-positive, false-negative rate 계산
tp = round(nrow(comparison[comparison$is_dead == 1 & comparison$prediction == 1, ])/nrow(covid_test),2);
tn = round(nrow(comparison[comparison$is_dead == 0 & comparison$prediction == 0, ])/nrow(covid_test),2);
fp = round(nrow(comparison[comparison$is_dead == 0 & comparison$prediction == 1, ])/nrow(covid_test),2);
fn = round(nrow(comparison[comparison$is_dead == 1 & comparison$prediction == 0, ])/nrow(covid_test),2);
# true-positive, true-negative, false-positive, false-negative rate 계산
confusion_matrix = matrix(c(tp, fn, fp, tn), nrow = 2, byrow = TRUE, dimnames = list(c("Actual Positive", "Actual Negative"), c("Predicted Positive", "Predicted Negative")))
confusion_matrix;
logisticFit_dead = glm(day_cnt~., data =covid_dead_train, family = gaussian );
summary(logisticFit_dead);
print(paste("test 건수 : ", nrow(covid_dead_test)));
# 투병일수 예측성공 기준 설정
deadPredictCorrectCreteria = 10;
deadPredictCorrect = comparison_dead[abs(comparison_dead$day_cnt-comparison_dead$prediction_dead)<=deadPredictCorrectCreteria, 0];
print(paste("투병일수 예측성공 건수(",deadPredictCorrectCreteria,"일) : " , nrow(deadPredictCorrect)));
print(paste("투병일수 예측 정확도(",deadPredictCorrectCreteria,"일) : ", nrow(deadPredictCorrect) / nrow(covid_dead_test)));
# 5일 : 51.7%, 7일 : 72.6%, 10일 : 92.1%
# 5일 : 51.7%, 7일 : 72.6%, 10일 : 92.1%
